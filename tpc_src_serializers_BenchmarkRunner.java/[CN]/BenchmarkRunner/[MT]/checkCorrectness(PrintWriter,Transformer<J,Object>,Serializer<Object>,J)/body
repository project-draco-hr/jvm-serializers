{
  Object specialInput;
  String name=serializer.getName();
  try {
    specialInput=transformer.forward(value);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + name + "\" crashed during forward transformation.");
    errors.println(ERROR_DIVIDER);
    errors.println("\"" + name + "\" crashed during forward transformation.");
    ex.printStackTrace(errors);
    return;
  }
  byte[] array;
  try {
    array=serializer.serialize(specialInput);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + name + "\" crashed during serialization.");
    errors.println(ERROR_DIVIDER);
    errors.println("\"" + name + "\" crashed during serialization.");
    ex.printStackTrace(errors);
    return;
  }
  Object specialOutput;
  try {
    specialOutput=serializer.deserialize(array);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + name + "\" crashed during deserialization.");
    errors.println(ERROR_DIVIDER);
    errors.println("\"" + name + "\" crashed during deserialization.");
    ex.printStackTrace(errors);
    return;
  }
  J output;
  try {
    output=transformer.reverse(specialOutput);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + name + "\" crashed during reverse transformation.");
    errors.println(ERROR_DIVIDER);
    errors.println("\"" + name + "\" crashed during reverse transformation.");
    ex.printStackTrace(errors);
    return;
  }
  if (!value.equals(output)) {
    System.out.println("ERROR: \"" + name + "\" failed round-trip check.");
    errors.println(ERROR_DIVIDER);
    errors.println("\"" + name + "\" failed round-trip check.");
    errors.println("ORIGINAL:  " + value);
    errors.println("ROUNDTRIP: " + output);
  }
}
