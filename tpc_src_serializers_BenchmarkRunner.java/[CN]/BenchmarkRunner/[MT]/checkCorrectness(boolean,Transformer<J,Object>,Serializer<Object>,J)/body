{
  Object specialInput;
  try {
    specialInput=transformer.forward(value);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + serializer.getName() + "\" failed during forward transformation.");
    if (verbose)     ex.printStackTrace(System.out);
    return false;
  }
  byte[] array;
  try {
    array=serializer.serialize(specialInput);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + serializer.getName() + "\" failed during serialization.");
    if (verbose)     ex.printStackTrace(System.out);
    return false;
  }
  Object specialOutput;
  try {
    specialOutput=serializer.deserialize(array);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + serializer.getName() + "\" failed during deserialization.");
    if (verbose)     ex.printStackTrace(System.out);
    return false;
  }
  J output;
  try {
    output=transformer.reverse(specialOutput);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: \"" + serializer.getName() + "\" failed during reverse transformation.");
    if (verbose)     ex.printStackTrace(System.out);
    return false;
  }
  if (!value.equals(output)) {
    System.out.println("ERROR: \"" + serializer.getName() + "\" failed round-trip test.");
    if (verbose) {
      System.out.println("ORIGINAL:  " + value);
      System.out.println("ROUNDTRIP: " + output);
    }
    return false;
  }
  return true;
}
