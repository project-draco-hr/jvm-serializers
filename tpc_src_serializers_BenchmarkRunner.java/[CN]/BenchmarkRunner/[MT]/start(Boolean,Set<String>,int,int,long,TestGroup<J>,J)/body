{
  System.out.printf("%-24s %6s %6s %6s %6s %6s %6s %6s %5s\n"," ","create","ser","+same","deser","+shal","+deep","total","size");
  EnumMap<measurements,Map<String,Double>> values=new EnumMap<measurements,Map<String,Double>>(measurements.class);
  for (  measurements m : measurements.values())   values.put(m,new HashMap<String,Double>());
  for (  TestGroup.Entry<J,Object> entry : group.entries) {
    TestCaseRunner<J> runner=new TestCaseRunner<J>(entry.transformer,entry.serializer,value);
    String name=entry.serializer.getName();
    if (filterIsInclude != null) {
      if (filterIsInclude != filterStrings.contains(name))       continue;
    }
    warmCreation(runner,warmupTime);
    doGc();
    double timeCreate=runner.runTakeMin(trials,Create,iterations * 100);
    warmSerialization(runner,warmupTime);
    checkCorrectness(entry.transformer,entry.serializer,value);
    doGc();
    double timeSerializeDifferentObjects=runner.runTakeMin(trials,Serialize,iterations);
    doGc();
    double timeSerializeSameObject=runner.runTakeMin(trials,SerializeSameObject,iterations);
    warmDeserialization(runner,warmupTime);
    doGc();
    double timeDeserializeNoFieldAccess=runner.runTakeMin(trials,Deserialize,iterations);
    doGc();
    double timeDeserializeAndCheckShallow=runner.runTakeMin(trials,DeserializeAndCheckShallow,iterations);
    doGc();
    double timeDeserializeAndCheck=runner.runTakeMin(trials,DeserializeAndCheck,iterations);
    double totalTime=timeSerializeDifferentObjects + timeDeserializeAndCheck;
    byte[] array=entry.serializer.serialize(entry.transformer.forward(value));
    System.out.printf("%-24s %6.0f %6.0f %6.0f %6.0f %6.0f %6.0f %6.0f %5d\n",name,timeCreate,timeSerializeDifferentObjects,timeSerializeSameObject,timeDeserializeNoFieldAccess,timeDeserializeAndCheckShallow,timeDeserializeAndCheck,totalTime,array.length);
    addValue(values,name,timeCreate,timeSerializeDifferentObjects,timeSerializeSameObject,timeDeserializeNoFieldAccess,timeDeserializeAndCheckShallow,timeDeserializeAndCheck,totalTime,array.length);
  }
  return values;
}
