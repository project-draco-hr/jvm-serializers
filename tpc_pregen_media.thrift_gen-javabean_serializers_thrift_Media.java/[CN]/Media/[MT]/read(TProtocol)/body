{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case URI:
        if (field.type == TType.STRING) {
          this.uri=iprot.readString();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case TITLE:
    if (field.type == TType.STRING) {
      this.title=iprot.readString();
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case WIDTH:
if (field.type == TType.I32) {
  this.width=iprot.readI32();
  setWidthIsSet(true);
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case HEIGHT:
if (field.type == TType.I32) {
this.height=iprot.readI32();
setHeightIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case FORMAT:
if (field.type == TType.STRING) {
this.format=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case DURATION:
if (field.type == TType.I64) {
this.duration=iprot.readI64();
setDurationIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SIZE:
if (field.type == TType.I64) {
this.size=iprot.readI64();
setSizeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BITRATE:
if (field.type == TType.I32) {
this.bitrate=iprot.readI32();
setBitrateIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PERSON:
if (field.type == TType.LIST) {
{
TList _list0=iprot.readListBegin();
this.person=new ArrayList<String>(_list0.size);
for (int _i1=0; _i1 < _list0.size; ++_i1) {
String _elem2;
_elem2=iprot.readString();
this.person.add(_elem2);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PLAYER:
if (field.type == TType.I32) {
this.player=Player.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case COPYRIGHT:
if (field.type == TType.STRING) {
this.copyright=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
