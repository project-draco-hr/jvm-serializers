{
  int i=offset;
  try {
    byte header=buf[i++];
    if (header == (byte)0) {
      int size=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        size|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      if (size > colferSizeMax)       throw new SecurityException(format("colfer: field serializers/colfer/media.media.uri size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int start=i;
      i+=size;
      this.uri=new String(buf,start,size,this._utf8);
      header=buf[i++];
    }
    if (header == (byte)1) {
      int size=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        size|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      if (size > colferSizeMax)       throw new SecurityException(format("colfer: field serializers/colfer/media.media.title size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int start=i;
      i+=size;
      this.title=new String(buf,start,size,this._utf8);
      header=buf[i++];
    }
    if (header == (byte)2) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.width=x;
      header=buf[i++];
    }
 else     if (header == (byte)(2 | 0x80)) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.width=-x;
      header=buf[i++];
    }
    if (header == (byte)3) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.height=x;
      header=buf[i++];
    }
 else     if (header == (byte)(3 | 0x80)) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.height=-x;
      header=buf[i++];
    }
    if (header == (byte)4) {
      int size=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        size|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      if (size > colferSizeMax)       throw new SecurityException(format("colfer: field serializers/colfer/media.media.format size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int start=i;
      i+=size;
      this.format=new String(buf,start,size,this._utf8);
      header=buf[i++];
    }
    if (header == (byte)5) {
      long x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        if (shift == 56 || b >= 0) {
          x|=(b & 0xffL) << shift;
          break;
        }
        x|=(b & 0x7fL) << shift;
      }
      this.duration=x;
      header=buf[i++];
    }
 else     if (header == (byte)(5 | 0x80)) {
      long x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        if (shift == 56 || b >= 0) {
          x|=(b & 0xffL) << shift;
          break;
        }
        x|=(b & 0x7fL) << shift;
      }
      this.duration=-x;
      header=buf[i++];
    }
    if (header == (byte)6) {
      long x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        if (shift == 56 || b >= 0) {
          x|=(b & 0xffL) << shift;
          break;
        }
        x|=(b & 0x7fL) << shift;
      }
      this.size=x;
      header=buf[i++];
    }
 else     if (header == (byte)(6 | 0x80)) {
      long x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        if (shift == 56 || b >= 0) {
          x|=(b & 0xffL) << shift;
          break;
        }
        x|=(b & 0x7fL) << shift;
      }
      this.size=-x;
      header=buf[i++];
    }
    if (header == (byte)7) {
      int length=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        length|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      if (length > colferListMax)       throw new SecurityException(format("colfer: field serializers/colfer/media.media.persons length %d exceeds %d elements",length,colferListMax));
      String[] a=new String[length];
      for (int ai=0; ai < length; ai++) {
        int size=0;
        for (int shift=0; true; shift+=7) {
          byte b=buf[i++];
          size|=(b & 0x7f) << shift;
          if (shift == 28 || b >= 0)           break;
        }
        if (size > colferSizeMax)         throw new SecurityException(format("colfer: field serializers/colfer/media.media.persons size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
        int start=i;
        i+=size;
        a[ai]=new String(buf,start,size,this._utf8);
      }
      this.persons=a;
      header=buf[i++];
    }
    if (header == (byte)8) {
      int size=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        size|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      if (size > colferSizeMax)       throw new SecurityException(format("colfer: field serializers/colfer/media.media.copyright size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int start=i;
      i+=size;
      this.copyright=new String(buf,start,size,this._utf8);
      header=buf[i++];
    }
    if (header == (byte)9) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.bitrate=x;
      header=buf[i++];
    }
 else     if (header == (byte)(9 | 0x80)) {
      int x=0;
      for (int shift=0; true; shift+=7) {
        byte b=buf[i++];
        x|=(b & 0x7f) << shift;
        if (shift == 28 || b >= 0)         break;
      }
      this.bitrate=-x;
      header=buf[i++];
    }
    if (header == (byte)10) {
      this.hasBitrate=true;
      header=buf[i++];
    }
    if (header == (byte)11) {
      this.flashPlay=true;
      header=buf[i++];
    }
    if (header == (byte)12) {
      this.javaPlay=true;
      header=buf[i++];
    }
    if (header != (byte)0x7f)     throw new InputMismatchException(format("colfer: unknown header at byte %d",i - 1));
  }
 catch (  IndexOutOfBoundsException e) {
    if (i - offset > colferSizeMax)     throw new SecurityException(format("colfer: serial exceeds %d bytes",colferSizeMax));
    if (i >= buf.length)     throw new BufferUnderflowException();
    throw new RuntimeException("colfer: bug",e);
  }
  if (i - offset > colferSizeMax)   throw new SecurityException(format("colfer: serial exceeds %d bytes",colferSizeMax));
  return i;
}
