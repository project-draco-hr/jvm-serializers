{
  int i=offset;
  try {
    if (!this.uri.isEmpty()) {
      buf[i++]=(byte)0;
      int start=++i;
      String s=this.uri;
      for (int sIndex=0, sLength=s.length(); sIndex < sLength; sIndex++) {
        char c=s.charAt(sIndex);
        if (c < '\u0080') {
          buf[i++]=(byte)c;
        }
 else         if (c < '\u0800') {
          buf[i++]=(byte)(192 | c >>> 6);
          buf[i++]=(byte)(128 | c & 63);
        }
 else         if (c < '\ud800' || c > '\udfff') {
          buf[i++]=(byte)(224 | c >>> 12);
          buf[i++]=(byte)(128 | c >>> 6 & 63);
          buf[i++]=(byte)(128 | c & 63);
        }
 else {
          int cp=0;
          if (++sIndex < sLength)           cp=Character.toCodePoint(c,s.charAt(sIndex));
          if ((cp >= 1 << 16) && (cp < 1 << 21)) {
            buf[i++]=(byte)(240 | cp >>> 18);
            buf[i++]=(byte)(128 | cp >>> 12 & 63);
            buf[i++]=(byte)(128 | cp >>> 6 & 63);
            buf[i++]=(byte)(128 | cp & 63);
          }
 else           buf[i++]=(byte)'?';
        }
      }
      int size=i - start;
      if (size > colferSizeMax)       throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.uri size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int ii=start - 1;
      if (size > 0x7f) {
        i++;
        for (int x=size; x >= 1 << 14; x>>>=7)         i++;
        System.arraycopy(buf,start,buf,i - size,size);
        do {
          buf[ii++]=(byte)(size | 0x80);
          size>>>=7;
        }
 while (size > 0x7f);
      }
      buf[ii]=(byte)size;
    }
    if (!this.title.isEmpty()) {
      buf[i++]=(byte)1;
      int start=++i;
      String s=this.title;
      for (int sIndex=0, sLength=s.length(); sIndex < sLength; sIndex++) {
        char c=s.charAt(sIndex);
        if (c < '\u0080') {
          buf[i++]=(byte)c;
        }
 else         if (c < '\u0800') {
          buf[i++]=(byte)(192 | c >>> 6);
          buf[i++]=(byte)(128 | c & 63);
        }
 else         if (c < '\ud800' || c > '\udfff') {
          buf[i++]=(byte)(224 | c >>> 12);
          buf[i++]=(byte)(128 | c >>> 6 & 63);
          buf[i++]=(byte)(128 | c & 63);
        }
 else {
          int cp=0;
          if (++sIndex < sLength)           cp=Character.toCodePoint(c,s.charAt(sIndex));
          if ((cp >= 1 << 16) && (cp < 1 << 21)) {
            buf[i++]=(byte)(240 | cp >>> 18);
            buf[i++]=(byte)(128 | cp >>> 12 & 63);
            buf[i++]=(byte)(128 | cp >>> 6 & 63);
            buf[i++]=(byte)(128 | cp & 63);
          }
 else           buf[i++]=(byte)'?';
        }
      }
      int size=i - start;
      if (size > colferSizeMax)       throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.title size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int ii=start - 1;
      if (size > 0x7f) {
        i++;
        for (int x=size; x >= 1 << 14; x>>>=7)         i++;
        System.arraycopy(buf,start,buf,i - size,size);
        do {
          buf[ii++]=(byte)(size | 0x80);
          size>>>=7;
        }
 while (size > 0x7f);
      }
      buf[ii]=(byte)size;
    }
    if (this.width != 0) {
      int x=this.width;
      if (x < 0) {
        x=-x;
        buf[i++]=(byte)(2 | 0x80);
      }
 else       buf[i++]=(byte)2;
      while ((x & ~0x7f) != 0) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
    }
    if (this.height != 0) {
      int x=this.height;
      if (x < 0) {
        x=-x;
        buf[i++]=(byte)(3 | 0x80);
      }
 else       buf[i++]=(byte)3;
      while ((x & ~0x7f) != 0) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
    }
    if (!this.format.isEmpty()) {
      buf[i++]=(byte)4;
      int start=++i;
      String s=this.format;
      for (int sIndex=0, sLength=s.length(); sIndex < sLength; sIndex++) {
        char c=s.charAt(sIndex);
        if (c < '\u0080') {
          buf[i++]=(byte)c;
        }
 else         if (c < '\u0800') {
          buf[i++]=(byte)(192 | c >>> 6);
          buf[i++]=(byte)(128 | c & 63);
        }
 else         if (c < '\ud800' || c > '\udfff') {
          buf[i++]=(byte)(224 | c >>> 12);
          buf[i++]=(byte)(128 | c >>> 6 & 63);
          buf[i++]=(byte)(128 | c & 63);
        }
 else {
          int cp=0;
          if (++sIndex < sLength)           cp=Character.toCodePoint(c,s.charAt(sIndex));
          if ((cp >= 1 << 16) && (cp < 1 << 21)) {
            buf[i++]=(byte)(240 | cp >>> 18);
            buf[i++]=(byte)(128 | cp >>> 12 & 63);
            buf[i++]=(byte)(128 | cp >>> 6 & 63);
            buf[i++]=(byte)(128 | cp & 63);
          }
 else           buf[i++]=(byte)'?';
        }
      }
      int size=i - start;
      if (size > colferSizeMax)       throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.format size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int ii=start - 1;
      if (size > 0x7f) {
        i++;
        for (int x=size; x >= 1 << 14; x>>>=7)         i++;
        System.arraycopy(buf,start,buf,i - size,size);
        do {
          buf[ii++]=(byte)(size | 0x80);
          size>>>=7;
        }
 while (size > 0x7f);
      }
      buf[ii]=(byte)size;
    }
    if (this.duration != 0) {
      long x=this.duration;
      if (x < 0) {
        x=-x;
        buf[i++]=(byte)(5 | 0x80);
      }
 else       buf[i++]=(byte)5;
      for (int n=0; n < 8 && (x & ~0x7fL) != 0; n++) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
    }
    if (this.size != 0) {
      long x=this.size;
      if (x < 0) {
        x=-x;
        buf[i++]=(byte)(6 | 0x80);
      }
 else       buf[i++]=(byte)6;
      for (int n=0; n < 8 && (x & ~0x7fL) != 0; n++) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
    }
    if (this.persons.length != 0) {
      buf[i++]=(byte)7;
      String[] a=this.persons;
      int x=a.length;
      if (x > colferListMax)       throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.persons length %d exceeds %d elements",x,colferListMax));
      while (x > 0x7f) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
      for (int ai=0; ai < a.length; ai++) {
        String s=a[ai];
        if (s == null) {
          s="";
          a[ai]=s;
        }
        int start=++i;
        for (int sIndex=0, sLength=s.length(); sIndex < sLength; sIndex++) {
          char c=s.charAt(sIndex);
          if (c < '\u0080') {
            buf[i++]=(byte)c;
          }
 else           if (c < '\u0800') {
            buf[i++]=(byte)(192 | c >>> 6);
            buf[i++]=(byte)(128 | c & 63);
          }
 else           if (c < '\ud800' || c > '\udfff') {
            buf[i++]=(byte)(224 | c >>> 12);
            buf[i++]=(byte)(128 | c >>> 6 & 63);
            buf[i++]=(byte)(128 | c & 63);
          }
 else {
            int cp=0;
            if (++sIndex < sLength)             cp=Character.toCodePoint(c,s.charAt(sIndex));
            if ((cp >= 1 << 16) && (cp < 1 << 21)) {
              buf[i++]=(byte)(240 | cp >>> 18);
              buf[i++]=(byte)(128 | cp >>> 12 & 63);
              buf[i++]=(byte)(128 | cp >>> 6 & 63);
              buf[i++]=(byte)(128 | cp & 63);
            }
 else             buf[i++]=(byte)'?';
          }
        }
        int size=i - start;
        if (size > colferSizeMax)         throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.persons size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
        int ii=start - 1;
        if (size > 0x7f) {
          i++;
          for (int y=size; y >= 1 << 14; y>>>=7)           i++;
          System.arraycopy(buf,start,buf,i - size,size);
          do {
            buf[ii++]=(byte)(size | 0x80);
            size>>>=7;
          }
 while (size > 0x7f);
        }
        buf[ii]=(byte)size;
      }
    }
    if (!this.copyright.isEmpty()) {
      buf[i++]=(byte)8;
      int start=++i;
      String s=this.copyright;
      for (int sIndex=0, sLength=s.length(); sIndex < sLength; sIndex++) {
        char c=s.charAt(sIndex);
        if (c < '\u0080') {
          buf[i++]=(byte)c;
        }
 else         if (c < '\u0800') {
          buf[i++]=(byte)(192 | c >>> 6);
          buf[i++]=(byte)(128 | c & 63);
        }
 else         if (c < '\ud800' || c > '\udfff') {
          buf[i++]=(byte)(224 | c >>> 12);
          buf[i++]=(byte)(128 | c >>> 6 & 63);
          buf[i++]=(byte)(128 | c & 63);
        }
 else {
          int cp=0;
          if (++sIndex < sLength)           cp=Character.toCodePoint(c,s.charAt(sIndex));
          if ((cp >= 1 << 16) && (cp < 1 << 21)) {
            buf[i++]=(byte)(240 | cp >>> 18);
            buf[i++]=(byte)(128 | cp >>> 12 & 63);
            buf[i++]=(byte)(128 | cp >>> 6 & 63);
            buf[i++]=(byte)(128 | cp & 63);
          }
 else           buf[i++]=(byte)'?';
        }
      }
      int size=i - start;
      if (size > colferSizeMax)       throw new IllegalStateException(format("colfer: field serializers/colfer/media.media.copyright size %d exceeds %d UTF-8 bytes",size,colferSizeMax));
      int ii=start - 1;
      if (size > 0x7f) {
        i++;
        for (int x=size; x >= 1 << 14; x>>>=7)         i++;
        System.arraycopy(buf,start,buf,i - size,size);
        do {
          buf[ii++]=(byte)(size | 0x80);
          size>>>=7;
        }
 while (size > 0x7f);
      }
      buf[ii]=(byte)size;
    }
    if (this.bitrate != 0) {
      int x=this.bitrate;
      if (x < 0) {
        x=-x;
        buf[i++]=(byte)(9 | 0x80);
      }
 else       buf[i++]=(byte)9;
      while ((x & ~0x7f) != 0) {
        buf[i++]=(byte)(x | 0x80);
        x>>>=7;
      }
      buf[i++]=(byte)x;
    }
    if (this.hasBitrate) {
      buf[i++]=(byte)10;
    }
    if (this.flashPlay) {
      buf[i++]=(byte)11;
    }
    if (this.javaPlay) {
      buf[i++]=(byte)12;
    }
    buf[i++]=(byte)0x7f;
    return i;
  }
 catch (  IndexOutOfBoundsException e) {
    if (i - offset > colferSizeMax)     throw new IllegalStateException(format("colfer: serial exceeds %d bytes",colferSizeMax));
    if (i >= buf.length)     throw new BufferOverflowException();
    throw e;
  }
}
