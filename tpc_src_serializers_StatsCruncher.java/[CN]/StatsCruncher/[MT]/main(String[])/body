{
  if (args.length != 2) {
    System.err.println("Usage: COMMAND <input-stats.txt> <output-report.texfile>");
    System.exit(1);
    return;
  }
  String inputFile=args[0];
  String outputFile=args[1];
  StatsCruncher statsCruncher=new StatsCruncher();
  List<TestCaseResult> stats=statsCruncher.readStats(inputFile);
  PrintStream out=new PrintStream(new FileOutputStream(outputFile));
  out.println("<h3>Test Platform</h3>");
  out.println("OS:" + System.getProperty("os.name"));
  out.println("JVM:" + System.getProperty("java.vendor") + " "+ System.getProperty("java.version"));
  out.println("CPU:" + System.getenv("PROCESSOR_IDENTIFIER") + " os-arch:"+ System.getenv("PROCESSOR_ARCHITECTURE"));
  out.println("Cores (incl HT):" + Runtime.getRuntime().availableProcessors());
  out.println();
  out.println("<h3>Disclaimer</h3>\n" + "\n" + "This test focusses on en/decoding of a cyclefree data structure, but the featureset of the libraries compared differs a lot:\n<ul>"+ "<li>some serializers support cycle detection/object sharing others just write non-cyclic tree structures</li>\n"+ "<li>some include full metadata in serialized output, some don't</li>\n"+ "<li>some are cross platform, some are language specific</li>\n"+ "<li>some are text based, some are binary,</li>\n"+ "<li>some support versioning forward/backward, both, some don't</li></ul>\n\n"+ "(See \"ToolBehavior\":wiki/ToolBehavior)\n"+ "Other test data will yield different results (e.g. adding a non ascii char to every string :-) ). However the results give a raw estimation of library performance.");
  List<TestCaseResult> all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if (testCaseResult.getFeatures().getGraph() == SerGraph.FULL_GRAPH || testCaseResult.getFeatures().getClz() == SerClass.MANUAL_OPT || ",kryo-flat,fst-flat,protobuf/protostuff,protostuff-runtime,protobuf/protostuff-runtime,".indexOf("," + testCaseResult.getName() + ",") >= 0) {
      all.remove(i--);
    }
  }
  String desc="Benchmarks serializers\n<ul>" + "<li>Only cycle free tree structures. An object referenced twice will be serialized twice.</li>\n" + "<li>no manual optimizations.</li>\n"+ "<li>schema is known in advance (pre registration or even class generation). (Not all might make use of that)</li>\n"+ "</ul>";
  out.println(statsCruncher.generateResultSection(all,"Serializers (no shared refs)",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if (testCaseResult.getFeatures().getGraph() != SerGraph.FULL_GRAPH || testCaseResult.getFeatures().getClz() == SerClass.MANUAL_OPT || ",,".indexOf("," + testCaseResult.getName() + ",") >= 0) {
      all.remove(i--);
    }
  }
  desc="Contains serializer(-configurations)\n<ul>" + "<li>supporting full object graph write/read. Object graph may contain cycles. If an Object is referenced twice, it will be so after deserialization.</li>\n" + "<li>nothing is known in advance, no class generation, no preregistering of classes. Everything is captured at runtime using e.g. reflection.</li>\n"+ "<li>note this usually cannot be used cross language, however JSON/XML formats may enable cross language deserialization.</li>\n"+ "</ul>";
  out.println(statsCruncher.generateResultSection(all,"Full Object Graph Serializers",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if (testCaseResult.getFeatures().getFormat() != SerFormat.BIN_CROSSLANG || testCaseResult.getFeatures().getClz() == SerClass.MANUAL_OPT || ",,".indexOf("," + testCaseResult.getName() + ",") >= 0) {
      all.remove(i--);
    }
  }
  desc="Contains serializer(-configurations)\n<ul>" + "<li>Only cycle free tree structures. An object referenced twice will be serialized twice.</li>\n" + "<li>schema is known in advance (pre registration, intermediate message description languages, class generation).</li>\n"+ "</ul>";
  out.println(statsCruncher.generateResultSection(all,"Cross Lang Binary Serializers",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if ((testCaseResult.getFeatures().getFormat() != SerFormat.JSON && testCaseResult.getFeatures().getFormat() != SerFormat.XML) || testCaseResult.getFeatures().getClz() == SerClass.MANUAL_OPT || ",,".indexOf("," + testCaseResult.getName() + ",") >= 0) {
      all.remove(i--);
    }
  }
  desc="<ul>" + "<li>text format based. Usually can be read by anybody. Frequently inline schema inside data.</li>\n" + "<li>Mixed regarding required preparation, object graph awareness (references).</li>\n"+ "</ul>";
  out.println(statsCruncher.generateResultSection(all,"XML/JSon Serializers",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if (testCaseResult.getFeatures().getClz() != SerClass.MANUAL_OPT || ",,".indexOf("," + testCaseResult.getName() + ",") >= 0) {
      all.remove(i--);
    }
  }
  desc="all flavours of manually optimized serializers. Handcoded and hardwired to exactly the benchmark's message structures.\n" + "<ul><li>illustrates what's possible, at what level generic approaches can be optimized in case\n</li></ul>";
  out.println(statsCruncher.generateResultSection(all,"Manually optimized Serializers",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  for (int i=0; i < all.size(); i++) {
    TestCaseResult testCaseResult=all.get(i);
    if ((",fst,fst-flat,fst-flat-pre,kryo-manual,kryo-serializer,kryo-flat,kryo-flat-pre,protostuff,protostuff-runtime,protostuf-manual," + "msgpack/databind,msgpack/manual,").indexOf("," + testCaseResult.getName() + ",") < 0) {
      all.remove(i--);
    }
  }
  desc="shows performance vs convenience of manually-selected libs.\n<ul>" + "<li>cycle free, schema known at compile time, manual optimization: kryo-manual, msgpack/manual</li>\n" + "<li>cycle free, schema known at compile time: protostuff, fst-flat-pre, kryo-flat-pre. (note: protostuff uses class generation while the other two just require a list of classes to be written)</li>\n"+ "<li>cycle free, schema UNKNOWN at compile time: fst-flat, kryo-flat, protostuff-runtime, msgpack/databind</li>\n"+ "<li>full object graph awareness, schema UNKNOWN at compile time: fst, kryo.</li>\n"+ "</ul>";
  out.println(statsCruncher.generateResultSection(all,"Cost of features",desc));
  all=statsCruncher.generateChartList(stats,"*","total",1000,1000,new SerFeatures(null,null,null));
  out.println("<h3>Full data</h3>\n");
  out.println(statsCruncher.dump(all));
  out.println();
  out.println(statsCruncher.dumpFeatures(all));
  out.flush();
  out.close();
}
